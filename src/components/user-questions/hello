import React from 'react';
import { Grid, Row, Cell } from 'react-inline-grid';
import '../../styles/student-adda.css';
import Divider from 'material-ui/Divider';
import TextField from 'material-ui/TextField';
import FlatButton from 'material-ui/FlatButton';
import {notify} from 'react-notify-toast';
import QuestionCard from './questionCard'
var properties = require('../properties.json');

class userQuestion extends React.Component {

  constructor(props) {
    super(props);
    this.state={
      question : '',
      answer: '',
      questions:[],
      answers:[],
      newuseremails:[],
      newQuestionIds:[],
      newuser:[],
      buttonDisabled:false
    }
    this.getQuestions = this.getQuestions.bind(this);
    this.handleQuestionChange = this.handleQuestionChange.bind(this);
    this.handleAnswerChange = this.handleAnswerChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.list = this.list.bind(this);
    this.Enter = this.Enter.bind(this);
  }
  list(buffer){
    buffer.push(
      <QuestionCard />
    )
    return buffer;
  }
  getQuestions(){
    fetch('http://'+properties.getHostName+':8080/user/questions/getAllQuestions', {
             credentials: 'include',
             method: 'GET'
          }).then(response => {
            return response.json()
          }).then(response => {
            var questions = []
            var answers = []
            var newuser = []
            var newuseremails = []
            var newQuestionIds = []
            for(let i=0;i<response.content.length;i++)
             {
               questions.push(response.content[i].question)
               answers.push(response.content[i].answer)
               newuser.push(response.content[i].op)
               newuseremails.push(response.content[i].op.email)
               newQuestionIds.push(response.content[i].questionId)
            }
             this.setState({
                 users: newuser,
                 questions: questions,
                 answers: answers,
                 newQuestionIds : newQuestionIds,
                 newuseremails: newuseremails
           })
          })
  }

  componentWillMount(){
    console.log("heyyaaaaaa")
    this.getQuestions()
  }
  handleSubmit(){
     this.setState({
       buttonDisabled: true
     })
     var trimmedQuestion = this.state.question.replace(/\s/g,'')
     if(trimmedQuestion===''){
      notify.show("Question catnnot be null","error");
     }else{
    fetch('http://'+properties.getHostName+':8080/user/questions/ask', {
           method: 'POST',
           headers: {
                 'mode': 'cors',
                 'Content-Type': 'application/json'
             },
         credentials: 'include',
         body: JSON.stringify({
           question: this.state.question,
          //  answer: this.state.answer
        })
       }).then(response => {
         if(response.status === 200)
         {
           this.setState({
              buttonDisabled: false,
              question:'',
              answer:''
            })
            return response.text();
         }
         else{
           let myColor = { background: '#0E1717', text: "#FFFFFF",zDepth:'20'};
           notify.show("sorry something went wrong","custom",5000,myColor)
         }
       }).then(response => {
         this.setState({
           response : response,
           number : 1,
           message: '',
         })
        //  this.componentWillMount()
         notify.show("Question uploaded successfully","success")
       })}
  }
  handleQuestionChange(e){
    this.setState({question:e.target.value});
  }
  handleAnswerChange(e){
    this.setState({answer:e.target.value});
  }
  Enter(){
    console.log("")
  }
  render(){
    var buffer = []
    return(
      <div>
        <div>
          <h1 className="announcements">Post New Questions</h1>
          <Grid className="question">
            <Row is="center">
              <Cell is="6 tablet-4 phone-4">
                <TextField
                 value = {this.state.question}
                 onChange = {this.handleQuestionChange}
                 hintText = "Ask a Question"
                 className="input"
                 onKeyPress={this.Enter}
                 />
              </Cell>
            </Row>
          </Grid>
          <Grid className="answer">
            <Row is="center">
                <Cell is="6 tablet-4 phone-4">
                  <TextField
                   value = {this.state.answer}
                   onChange = {this.handleAnswerChange}
                   hintText = "Answer the Question"
                   className="input"
                   onKeyPress={this.Enter}
                   />
                </Cell>
            </Row>
          </Grid>
          <FlatButton label="Post" type="submit"  disabled={this.state.buttonDisabled}
          className="AnnounceButton" onTouchTap={this.handleSubmit}/>
        </div>
        <Divider />
        <div>
        {this.list(buffer)}
        </div>
      </div>
    );
   }
}
export default userQuestion
